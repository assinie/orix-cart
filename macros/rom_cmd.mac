
;----------------------------------------------------------------------
; Number of commands
;----------------------------------------------------------------------
.scope SDK_ROM
	command_nb .set 0
.endscope

;----------------------------------------------------------------------
;
; usage:
;       add_command "command_name"[, command_address]
;
; note:
;       command_address defaults to command_name
;       Ex: add_command "test" will use label test  for command_address
;
; Add command_name to the rom
;----------------------------------------------------------------------
.macro add_command command, address

	.pushseg

	.segment "INSTRTBL"
	.ident(.sprintf("%s_name",command)) := *
	.asciiz command

	.segment "INSTRTBL2"
	.word .ident(.sprintf("%s_name",command))

	.if .not .xmatch({address}, NOOP)
		.segment "INSTRJMP"

		.if .not .blank({address})
			.addr address
		.else
			.word .ident(command)
		.endif
	.endif

	SDK_ROM::command_nb .set SDK_ROM::command_nb+1

	.popseg
.endmacro


;----------------------------------------------------------------------
;
; usage:
;       set_orix_vectors rom_type, parse_vector, signature
;
; note:
;       signature: may be "string" or label
;       if signature is a "string", this macro create new label rom_signaure
;
; Set orix rom vectors
;----------------------------------------------------------------------
.macro set_orix_vectors rom_type, parse_vector, signature
	.local _signature

	.pushseg

	.import __INSTRJMP_LOAD__
	.import __INSTRTBL_LOAD__

	.if .match(signature,"")
		.segment "SIGNATURE"
		.import __SIGNATURE_LOAD__

		; A voir si dans ce cas on doit d√©finir le label "rom_signature" ou non
		; .ident(.sprintf("rom_signature")) := *

		_signature := __SIGNATURE_LOAD__
		.asciiz signature
	.else
		_signature := signature
	.endif

	.segment "ORIXVECT"
	.byt rom_type
        .addr parse_vector
        .addr __INSTRJMP_LOAD__
        .addr __INSTRTBL_LOAD__
        .byte SDK_ROM::command_nb
        .word  _signature

	.popseg
.endmacro


;----------------------------------------------------------------------
;
; usage:
;       set_cpu_vectors nmi, reset, irq
;
; Set 6502 vectors
;----------------------------------------------------------------------
.macro set_cpu_vectors nmi, reset, irq
	.pushseg

	.segment "CPUVECT"
	.addr nmi
	.addr reset
	.addr irq

	.popseg
.endmacro

